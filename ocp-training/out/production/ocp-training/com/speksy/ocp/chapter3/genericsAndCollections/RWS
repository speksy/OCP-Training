What You Can’t Do with Generic Types
There are some limitations on what you can do with a generic type. These aren’t on the
exam, but it will helpful to refer back to this scenario when you are writing practice programs
and run into one of these.
Most of the limitations are due to type erasure. Oracle refers to types whose information
is fully available at runtime as reifiable. Reifiable types can do anything that Java allows.
Non-reifiable types have some limitations.
Here are the things that you can’t do with generics. (And by “can’t,” we mean without
resorting to contortions like passing in a class object.)
■■ Call the constructor. new T() is not allowed because at runtime it would be new
Object().
■■ Create an array of that static type. This one is the most annoying, but it makes sense
because you’d be creating an array of Objects.
■■ Call instanceof. This is not allowed because at runtime List<Integer> and
List<String> look the same to Java thanks to type erasure.
■■ Use a primitive type as a generic type parameter. This isn’t a big deal because you
can use the wrapper class instead. If you want a type of int, just use Integer.
■■ Create a static variable as a generic type parameter. This is not allowed because the
type is linked to the instance of the class.