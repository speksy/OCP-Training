1) A,B - 1
2) C,D,E - 1
3) C,D,E - 0 C,D
4) B - 1
5) E - 0 D
6) F - 0 D,F
7) D - 1
8) F - 1
9) F - 0 B
10) A - 0 E
11) E - 0 B
12) A,E - 1
13) E - 0 B
14) A,C,D - 1 - missing "Choose all that apply" in question !!!
15) B,E - 0 B,C
16) A,B,E - 0 A,B,F
17) A - 0 E
18) D - 1
19) A,B,C - 1
20) C,D,E -0 E

1. A, B. Choices E and F are incorrect because a Locale is created using a constructor. The
convention is to use lowercase for a language code and uppercase for a country code. The
language is mandatory when using a constructor, which makes choices A and B correct.
2. C, D, E. Localization refers to user-facing elements that a user sees. Currency, dates, and
numbers are commonly used in different formats for different countries. Class and variable
names are internal to the application, so there is no need to translate them for users. Booleans are true/false values with standard names.
3. C, D. Choice A is incorrect because Java will look at parent bundles. For example, Java will
look at Props.properties if Props_en.properties does not contain the requested key.
Java class resource bundles can have non-String values while property files are limited to
strings. Therefore, choice B is incorrect and choice C is correct. Choice D is correct because
the locale is only changed in memory. Choice E is incorrect because Java specifies that it
will look for a Java class resource bundle before a property file of the same name.
4. B. Java will first look for the most specific matches it can find, starting with Dolphins_en_
US.java and then Dolphins_en_US.properties. Since neither is found, it drops the country and looks for Dolphins_en.java. Since a match is found, there is no reason to go on to
the next one, which is Dolphins_en.properties.
5. D. Java will use Dolphins_fr.properties as the matching resource bundle on line 7
because it is an exact match on the language of the requested locale. Line 8 finds a matching key in this file. Line 9 does not find a match in that file, and therefore it has to look
higher up in the hierarchy. Once a bundle is chosen, only resources in that hierarchy are
allowed.
6. D, F. Options A and B are incorrect because LocalDate does not have a public constructor. Option C is incorrect because months start counting with 1 rather than 0. Option E
is incorrect because it uses the old Calendar constants for months, which begin with 0.
Options D and F are both correct ways of specifying the desired date.
7. D. A LocalDate does not have a time element. Therefore, it has no method to add hours,
and the code does not compile.
Chapter 5: Dates, Strings, and Localization 559
8. F. Java throws an exception if invalid date values are passed. There is no 40th day in
April—or any other month for that matter.
9. B. The date starts out as April 30, 2018. Since dates are immutable and the plus methods
have their return values ignored, the result is unchanged. Therefore, Option B is correct.
10. E. Even though d has both date and time, the formatter only outputs time.
11. B. Period does not allow chaining. Only the last Period method called counts, so only the
two years are subtracted.
12. A, E. When dealing with time zones, it is best to convert to GMT first by subtracting the
time zone. The first date/time is 9:00 GMT, and the second is 15:00 GMT. Therefore, the
first one is earlier by 6 hours.
13. B. dateTime1 is 2016–03–13T01:30–05:00[US/Eastern] and dateTime2 is
2016–03–13T03:30–04:00[US/Eastern]. While the values are two hours apart, the time
zone offset changes as well, making it only change from 6:30 GMT to 7:30 GMT.
14. A, C, D. Option B is incorrect because there is no March 40th. Option E is incorrect
because 2017 isn’t a leap year and therefore has no February 29th. Option D is correct
because it is just a regular date and has nothing to do with daylight savings time. Options A
and C are correct because Java is smart enough to adjust for daylight savings time.
15. B, C. Options A and D are incorrect because the String references do not point to the
same object. Option E is incorrect because a Period format begins with a P and a Duration format begins with PT. They are different types and do not represent the same value
even though they are both a day. Remember that Duration uses hours/minutes/seconds and
Period uses years/months/days for measures. Options B and C are correct because m1, m2,
and s all represent a duration of the same length.
16. A, B, F. Option A correctly creates the current instant. Option B correctly converts from
seconds to an Instant. Option F is also a proper conversion. Options C, D, and E are
incorrect because the source object does not represent a point in time. Without a time zone,
Java doesn’t know what moment in time to use for the Instant.
17. E. The Properties class defines a get() method that does not allow for a default value.
It also has a getProperty() method, which returns the default value if the key is not provided.
18. D. Options E and F do not compile because you can’t get a stream directly from a Properties object. Options A and B do not compile because the method is keySet(), not keys().
Option C outputs all of the keys, and Option D outputs all of the values.
19. A, B, C. Remember that Duration uses hours/minutes/seconds and Period uses years/
months/days for measures.
20. E. Local______ explicitly excludes time zones. Instant represents a point in time, but
always uses GMT rather than the desired time zone